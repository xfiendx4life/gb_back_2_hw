// Package prcr provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package prcr

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/xfiendx4life/gb_back_2_hw/hw9/pkg/models"
)

// Item defines model for Item.
// type Item struct {
// 	Name  *string `json:"name,omitempty"`
// 	Price *int    `json:"price,omitempty"`
// }

// List defines model for List.
// type List struct {
// 	Id    *string `json:"id,omitempty"`
// 	Items *[]Item `json:"items,omitempty"`
// }

// CreateListParams defines parameters for CreateList.
type CreateListParams struct {
	List *models.List `form:"list,omitempty" json:"list,omitempty"`
}

// UpdateListObjectJSONBody defines parameters for UpdateListObject.
type UpdateListObjectJSONBody = models.List

// UpdateListObjectJSONRequestBody defines body for UpdateListObject for application/json ContentType.
type UpdateListObjectJSONRequestBody = UpdateListObjectJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (POST /list/create)
	CreateList(ctx echo.Context, params CreateListParams) error

	// (DELETE /list/delete/{listId})
	DeleteList(ctx echo.Context, listId string) error

	// (PATCH /list/update)
	UpdateListObject(ctx echo.Context) error

	// (GET /list/{listId})
	ReadList(ctx echo.Context, listId string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// CreateList converts echo context to params.
func (w *ServerInterfaceWrapper) CreateList(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params CreateListParams
	// ------------- Optional query parameter "list" -------------

	err = json.NewDecoder(ctx.Request().Body).Decode(&params.List)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter list: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateList(ctx, params)
	return err
}

// DeleteList converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteList(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "listId" -------------
	var listId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "listId", runtime.ParamLocationPath, ctx.Param("listId"), &listId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter listId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteList(ctx, listId)
	return err
}

// UpdateListObject converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateListObject(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateListObject(ctx)
	return err
}

// ReadList converts echo context to params.
func (w *ServerInterfaceWrapper) ReadList(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "listId" -------------
	var listId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "listId", runtime.ParamLocationPath, ctx.Param("listId"), &listId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter listId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ReadList(ctx, listId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/list/create", wrapper.CreateList)
	router.DELETE(baseURL+"/list/delete/:listId", wrapper.DeleteList)
	router.PATCH(baseURL+"/list/update", wrapper.UpdateListObject)
	router.GET(baseURL+"/list/:listId", wrapper.ReadList)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/7yTT4/TPBDGv4o17ytxiTYFlkuOwKUSEgiJE+Lgtaetl8T2jidUVeXvjsZu6Z+EhUWC",
	"U5zxeDzPz8/swYQhBo+eE3R7SGaDgy7LJeMg30ghIrHDEvV6QPnyLiJ0kJicX0NuIJIz5zvOM66RIOfm",
	"GAp392hYkt+5xNPazs5WdoxD3T8u/idcQQf/tafm20PnbWn7dKcm0ru5JiTk/CpIPYvJkIvsgpcj0SkO",
	"ahvoq9o63qgirXeJEzTAjnup84EMQQPfkFI99vxmcbOQm0NEr6ODDl6WUANR86Y03kqV1hBqLqxiqByE",
	"gpbrlxY6eFP2CyM5S3pARkrQfd6Dk6seRqQdNIfHgL5mVgK/4lPK5vylAcIUg0+V/YvFQj4meEZfetIx",
	"9s6Urtr7JBL3Z1dcIpMOlLPQXL+eUL5MTaMxmNJq7NUP1ULttjZwmbyl4NfKatZSKjcHgBZ7ZGz38rO0",
	"uZ6T0JTl2xJ/hKW8zSXKpeggfBgdoYWOacRzuNcKpyRvp0JOqneqtmqr6JlcH1Q1qbjwoCs38GoOkEwZ",
	"ed0rJAp0AWmM9ugyzWYzRfOpJAia93UmqmpM/DrY3ZPc8BuGmxih9qeKdcqYlVVYqTLmov0Oldlov66s",
	"ngK5WOb88CPuOmj+E8TnBlzjzCR/RG3/rfcWf/3drimvUNz1M8ZG+2dcc05znPP3AAAA///+L7i1eAYA",
	"AA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
